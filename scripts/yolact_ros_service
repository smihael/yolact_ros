#!/usr/bin/env python
from common import *
from yolact_ros_msgs.srv import GetDetections

#import pdb; pdb.set_trace()

class YolactService(YolactNode):

  def __init__(self, net:Yolact):
    self.net = net

    self.detection_service = rospy.Service("~get_detections", GetDetections, self.service_callback)

    self.bridge = CvBridge()

    self.image_vis_queue = SynchronizedObject()
    self.visualization_thread = None
    self.unpause_visualization = threading.Event()

    # set parameter default values (will be overwritten by dynamic reconfigure callback)

    self.image_topic = ''
    self.use_compressed_image = False
    self.publish_visualization = True
    self.publish_detections = True
    self.display_visualization = False

    self.display_masks = True
    self.display_bboxes = True
    self.display_text = True
    self.display_scores = True
    self.display_fps = False
    self.score_threshold = 0.0
    self.crop_masks = True
    self.top_k = 5

    # for counting fps
    self.fps = 0
    self.last_reset_time = rospy.Time()
    self.frame_counter = 0

  def generate_detections_msg(self, classes, scores, boxes, masks, image_header):
    dets_msg = Detections()
    for detnum in range(len(classes)):
      det = Detection()
      det.class_name = cfg.dataset.class_names[classes[detnum]]
      det.score = float(scores[detnum])
      x1, y1, x2, y2 = boxes[detnum]
      det.box.x1 = int(x1)
      det.box.y1 = int(y1)
      det.box.x2 = int(x2)
      det.box.y2 = int(y2)
      mask = masks[detnum,y1:y2,x1:x2]
      det.mask.mask = np.packbits(mask.bool().cpu()).tolist()
      det.mask.height = int(y2 - y1)
      det.mask.width = int(x2 - x1)
      dets_msg.detections.append(det)

      #encoding_correct = True
      #for x in range(det.mask.width):
      #    for y in range(det.mask.height):
      #        if bool(masks[detnum,y1+y,x1+x]) != mask_utils.test(det.mask, x, y):
      #            encoding_correct = False
      #print('Encoding correct: ' + str(encoding_correct))

    dets_msg.header = image_header
    return dets_msg

  def evalimage(self, cv_image, image_header):
    with torch.no_grad():
      frame = torch.from_numpy(cv_image).cuda().float()
      batch = FastBaseTransform()(frame.unsqueeze(0))
      preds = self.net(batch)

      h, w, _ = frame.shape
      classes, scores, boxes, masks = self.postprocess_results(preds, w, h)

      if self.display_visualization:
        image = self.prep_display(classes, scores, boxes, masks, frame, fps_str=str(self.fps))

      dets = self.generate_detections_msg(classes, scores, boxes, masks, image_header)

      if self.display_visualization:
        self.image_vis_queue.put_nowait(image)
        #self.image_pub.publish(self.bridge.cv2_to_imgmsg(image, "bgr8"))
      
      return dets

  
  def service_callback(self,req):
    data = req.image  
    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
      dets = self.evalimage(cv_image, data.header)
      return True, dets
    except CvBridgeError as e:
      print(e)
      dets = Detections()
      return False, dets

if __name__ == '__main__':
    main(YolactService)
